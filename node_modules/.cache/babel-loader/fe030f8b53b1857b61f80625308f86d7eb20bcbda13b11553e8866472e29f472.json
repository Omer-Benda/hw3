{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Omer Ben David\\\\OneDrive - Ruppin Academic Center\\\\Desktop\\\\\\u05DE\\u05D8\\u05DC\\u05D4 3 \\u05E8\\u05D9\\u05D0\\u05E7\\u05D8\\\\hw3\\\\src\\\\Components\\\\FCNewIngredients.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Form } from 'react-router-dom';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FCNewIngredients() {\n  _s();\n  const [nametxt, setNameTxt] = useState('');\n  const [imageTxt, setImageTxt] = useState('');\n  const [caloriesTxt, setCaloriesTxt] = useState('');\n  const [counter, setCounter] = useState(1);\n  const AddNewIngredient = () => {\n    alert(nametxt);\n    {\n      setCounter(prevC => prevC + 1);\n    }\n    alert(counter);\n    const apiUrl = 'https://localhost:44338/api/ingredients';\n    fetch(apiUrl, {\n      method: 'POST',\n      body: JSON.stringify({\n        Id: counter,\n        Name: nametxt,\n        Image: imageTxt,\n        Calories: caloriesTxt\n      }),\n      headers: new Headers({\n        'Content-type': 'application/json; charset=UTF-8' //very important to add the 'charset=UTF-8'!!!!\n      })\n    }).then(res => {\n      console.log('res=', res);\n      console.log(\"res status=\", res.status);\n      return res.json();\n    }).then(result => {\n      console.log(\"fetch POST= \", result);\n      console.log(result.Name);\n    }, error => {\n      console.log(\"error post\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Create New Ingredient\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this), \"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: nametxt,\n      name: \"name\",\n      onChange: e => {\n        setNameTxt(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }, this), \"Image:\", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: imageTxt,\n      name: \"image\",\n      onChange: e => {\n        setImageTxt(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 4\n    }, this), \"Calories:\", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: caloriesTxt,\n      name: \"calories\",\n      onChange: e => {\n        setCaloriesTxt(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: AddNewIngredient,\n      children: \"Add New Ingredient\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n// const IngredientForm = (props) => {\n//     const [name,setName] = useState('');\n//     const [image,setImage] = useState('');\n//     const [calories,setCalories] = useState('');\n\n//     const validateInputs=()=>{\n//         if (name==='' || image ==='' || calories === '') {\n//             alert(\"missing some values, please fill the entire form.\");\n//         }\n//         else{\n//             addIngredient();\n//         }\n//     }\n//     const addIngredient = ()=>{\n//         //post to server, using firebase firestore db for that\n//         firestore().collection(\"ingredients\").add({\n//             name: name,\n//             image: image,\n//             calories: calories\n//         })\n//         .then(docRef=> {\n//             console.log(\"Document written with ID: \", docRef.id);\n//             alert(\"Ingredient succesfuly added to db\")\n//         })\n//         .catch(error=> {\n//             console.error(\"Error adding document: \", error);\n//         });\n//     }\n//     const clearForm=()=>{\n//         setName('');\n//         setImage('');\n//         setCalories('');\n//     }\n\n//     return (  \n//         <Row>\n//             <Col xs=\"2\"></Col>\n//             <Col>\n//                 <TextInput value={name} label=\"name\" placeholder=\"enter ingredient name\" changedText={(e)=>setName(e.target.value)}/>\n//                 <TextInput value={image} label=\"image\" placeholder=\"enter image url\" changedText={(e)=>setImage(e.target.value)}/>\n//                 <NumberInput value={calories} label=\"calorires\" placeholder=\"enter dish calories\" changedNumber={(e)=>setCalories(parseInt(e.target.value))}/>\n//                 <FormButtons btnText=\"Create new ingredient\" cancel={clearForm} submit={validateInputs} />\n//             </Col>\n//             <Col xs=\"2\"></Col>\n//         </Row>\n//     );\n_s(FCNewIngredients, \"8SmQtCK+lUXrC0E2kpUle2aezi0=\");\n_c = FCNewIngredients;\nvar _c;\n$RefreshReg$(_c, \"FCNewIngredients\");","map":{"version":3,"names":["React","Form","useState","FCNewIngredients","nametxt","setNameTxt","imageTxt","setImageTxt","caloriesTxt","setCaloriesTxt","counter","setCounter","AddNewIngredient","alert","prevC","apiUrl","fetch","method","body","JSON","stringify","Id","Name","Image","Calories","headers","Headers","then","res","console","log","status","json","result","error","e","target","value"],"sources":["C:/Users/Omer Ben David/OneDrive - Ruppin Academic Center/Desktop/מטלה 3 ריאקט/hw3/src/Components/FCNewIngredients.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Form } from 'react-router-dom';\r\nimport { useState } from 'react';\r\n\r\nexport default function FCNewIngredients() \r\n{\r\n\r\n  const [nametxt,setNameTxt]=useState('')\r\n  const [imageTxt, setImageTxt] = useState('')\r\n  const [caloriesTxt,setCaloriesTxt]=useState('')\r\n  const [counter,setCounter]=useState(1)\r\n    const AddNewIngredient=()=>\r\n    {\r\n      alert(nametxt)\r\n      {setCounter(prevC=>prevC+1)}\r\n      alert (counter)\r\n      const apiUrl='https://localhost:44338/api/ingredients'\r\n      fetch(apiUrl, \r\n        {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          Id:counter,\r\n          Name:nametxt,\r\n          Image:imageTxt,\r\n          Calories:caloriesTxt\r\n\r\n        }\r\n       ),\r\n        headers: new Headers({\r\n        'Content-type': 'application/json; charset=UTF-8' //very important to add the 'charset=UTF-8'!!!!\r\n        })\r\n        })\r\n        .then(res => {\r\n        console.log('res=', res);\r\n        console.log(\"res status=\", res.status)\r\n        return res.json();\r\n        })\r\n        .then((result) => {\r\n        console.log(\"fetch POST= \", result);\r\n        console.log(result.Name);\r\n        },\r\n        (error) => {\r\n        console.log(\"error post\");\r\n        });\r\n    \r\n      }\r\n      \r\n  return (\r\n    <div>\r\n    <h1>Create New Ingredient</h1>\r\n    Name:\r\n    <input type=\"text\" value={nametxt} name=\"name\" onChange={(e)=>{setNameTxt(e.target.value)}}/>\r\n    <br/>\r\n    Image:\r\n    <input type=\"text\" value={imageTxt} name=\"image\" onChange={(e)=> {setImageTxt(e.target.value)}} />\r\n   <br/>\r\n    Calories:\r\n    <input type=\"text\" value={caloriesTxt} name=\"calories\" onChange={(e)=>{setCaloriesTxt(e.target.value)} }/>\r\n    <br/>\r\n    <button onClick={AddNewIngredient}>Add New Ingredient</button>\r\n\r\n    </div>\r\n  )\r\n}\r\n// const IngredientForm = (props) => {\r\n  //     const [name,setName] = useState('');\r\n  //     const [image,setImage] = useState('');\r\n  //     const [calories,setCalories] = useState('');\r\n  \r\n  //     const validateInputs=()=>{\r\n  //         if (name==='' || image ==='' || calories === '') {\r\n  //             alert(\"missing some values, please fill the entire form.\");\r\n  //         }\r\n  //         else{\r\n  //             addIngredient();\r\n  //         }\r\n  //     }\r\n  //     const addIngredient = ()=>{\r\n  //         //post to server, using firebase firestore db for that\r\n  //         firestore().collection(\"ingredients\").add({\r\n  //             name: name,\r\n  //             image: image,\r\n  //             calories: calories\r\n  //         })\r\n  //         .then(docRef=> {\r\n  //             console.log(\"Document written with ID: \", docRef.id);\r\n  //             alert(\"Ingredient succesfuly added to db\")\r\n  //         })\r\n  //         .catch(error=> {\r\n  //             console.error(\"Error adding document: \", error);\r\n  //         });\r\n  //     }\r\n  //     const clearForm=()=>{\r\n  //         setName('');\r\n  //         setImage('');\r\n  //         setCalories('');\r\n  //     }\r\n  \r\n  //     return (  \r\n  //         <Row>\r\n  //             <Col xs=\"2\"></Col>\r\n  //             <Col>\r\n  //                 <TextInput value={name} label=\"name\" placeholder=\"enter ingredient name\" changedText={(e)=>setName(e.target.value)}/>\r\n  //                 <TextInput value={image} label=\"image\" placeholder=\"enter image url\" changedText={(e)=>setImage(e.target.value)}/>\r\n  //                 <NumberInput value={calories} label=\"calorires\" placeholder=\"enter dish calories\" changedNumber={(e)=>setCalories(parseInt(e.target.value))}/>\r\n  //                 <FormButtons btnText=\"Create new ingredient\" cancel={clearForm} submit={validateInputs} />\r\n  //             </Col>\r\n  //             <Col xs=\"2\"></Col>\r\n  //         </Row>\r\n  //     );"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}